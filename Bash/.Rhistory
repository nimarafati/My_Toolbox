# Chunk 18
boxplot(log2(as.matrix(cf)+1),ylab=expression('Log'[2]~'Read counts'),las=2,main="Filtered data")
# Chunk 19
hist(rowSums(cf>3))
# Chunk 20
all.equal(colnames(cf),rownames(mr))
# Chunk 21
write.csv(cf,"./data/counts_filtered.csv",quote=F)
# Chunk 22
download_data("data/counts_filtered.csv")
cf <- read.csv("data/counts_filtered.csv",stringsAsFactors=F,row.names=1)
download_data("data/metadata_raw.csv")
if(!exists("mr")) mr <- read.csv("data/metadata_raw.csv",stringsAsFactors=F,row.names=1)
all.equal(colnames(cf),rownames(mr))
# Chunk 23
cc <- t( t(cf) / colSums(cf) * 1e6 )
cc <- log2( cc + 1 )
boxplot(cc,ylab=expression('Log'[2]~'Read counts'),las=2,main="CPM")
# Chunk 24
#' @title Compute TPM from a read count matrix
#' @param counts A numeric data.frame of read counts with samples (columns) and genes (rows).
#' @param len A vector of gene cds length equal to number of rows of dfr.
#'
#' https://support.bioconductor.org/p/91218/
#'
tpm <- function(counts,len) {
x <- counts/len
return(t(t(x)*1e6/colSums(x)))
}
# Chunk 25
co <- read.delim("data/gene_counts_original.tsv",sep="\t",header=TRUE,stringsAsFactors=F,comment.char="#")
g <- data.frame( ensembl_gene_id = co$Geneid ,
transcript_length = co$Length,
stringsAsFactors = F, row.names = co$Geneid)
g <- g[!duplicated(g$ensembl_gene_id),]
# Chunk 26
igenes <- intersect(rownames(cf),g$ensembl_gene_id)
g1 <- g[igenes,]
cf1 <- cf[igenes,]
all.equal(rownames(cf1),g1$ensembl_gene_id)
# Chunk 27
ct <- tpm(cf1,g1$transcript_length)
ct <- log2( ct + 1 )
boxplot(ct,ylab=expression('Log'[2]~'Read counts'),las=2,main="TPM")
write.csv(ct,"./data/counts_tpm.csv",quote=F)
# Chunk 28
library(DESeq2)
mr$Group <- factor(mr$Group)
d <- DESeqDataSetFromMatrix(countData=cf,colData=mr,design=~Group)
d <- DESeq2::estimateSizeFactors(d,type="ratio")
cd <- log2( counts(d,normalized=TRUE) + 1 )
saveRDS(cd,"data/gene_counts_normalised_deseq2.Rds")
# Chunk 29
cd <- readRDS("data/gene_counts_normalised_deseq2.Rds")
boxplot(cd,ylab=expression('Log'[2]~'Read counts'),las=2,main="DESeq2")
# Chunk 30
library(DESeq2)
mr$Group <- factor(mr$Group)
d <- DESeqDataSetFromMatrix(countData=cf,colData=mr,design=~Group)
d <- DESeq2::estimateSizeFactors(d,type="ratio")
d <- DESeq2::estimateDispersions(d)
cv <- as.data.frame(assay(varianceStabilizingTransformation(d,blind=T)),check.names=F)
#write.csv(cv,"./data/gene_counts_vst.csv",quote=FALSE)
boxplot(cv,ylab=expression('Log'[2]~'Read counts'),las=2,main="VST")
# Chunk 31
rowVar <- function(x) apply(x,1,var)
rafalib::mypar(mfrow=c(2,2))
plot(rowMeans(cc),rowVar(cc),xlab=expression('Log'[2]~'Mean count'),ylab=expression('Log'[2]~'Variance'),main="CPM",cex=.1)
plot(rowMeans(ct),rowVar(ct),xlab=expression('Log'[2]~'Mean count'),ylab=expression('Log'[2]~'Variance'),main="TPM",cex=.1)
plot(rowMeans(cd),rowVar(cd),xlab=expression('Log'[2]~'Mean count'),ylab=expression('Log'[2]~'Variance'),main="DESeq2",cex=.1)
plot(rowMeans(cv),rowVar(cv),xlab=expression('Log'[2]~'Mean count'),ylab=expression('Log'[2]~'Variance'),main="VST",cex=.1)
rafalib::mypar(mar=c(6,2.5,2.5,1))
# Chunk 32
rafalib::mypar(1,4,mar=c(6,2.5,2.5,1) )
boxplot(as.matrix(cc),ylab=expression('Log'[2]~'Read counts'),las=2,main="CPM", ylim = c(0,16))
boxplot(as.matrix(ct),ylab=expression('Log'[2]~'Read counts'),las=2,main="TPM", ylim = c(0,16))
boxplot(as.matrix(cd),ylab=expression('Log'[2]~'Read counts'),las=2,main="DESeq2", ylim = c(0,16))
boxplot(as.matrix(cv),ylab=expression('Log'[2]~'Read counts'),las=2,main="VST", ylim = c(0,16))
rafalib::mypar(mar=c(6,2.5,2.5,1))
# Chunk 33
# write.csv(cc,"./data/counts_cpm.csv",quote=F)
write.csv(ct,"./data/counts_tpm.csv",quote=F)
# write.csv(cd,"./data/counts_deseq2.csv",quote=F)
# write.csv(cv,"./data/counts_vst.csv",quote=F)
version
Then by `VizDimLoadings` we can visualize top genes associated with reduction components.
```{r,fig.asp=.5}
VizDimLoadings(alldata, dims = 1:5, reduction = "pca",ncol = 5,balanced = T)
```
We can visualize all the components and their SDs.
```{r}
ElbowPlot(alldata, reduction = "pca",ndims = 50)
```
### tSNE
```{r,fig.asp=1}
alldata <- RunTSNE(alldata, reduction = "pca", dims = 1:30,
perplexity=30,
max_iter=1000,
theta=0.5,
eta=200,
num_threads=0 )
#see ?Rtsne and ?RunTSNE for more info
plot_grid(ncol = 3,DimPlot(alldata, reduction = "tsne", group.by = "orig.ident"))
```
library("ape")
library("Biostrings")
library("ggplot2")
library("ggtree")
tree <- read.tree('~/Dropbox/Doc/My_tools_in/Git_Projects/Covid/Covid_Lineage_Countrry/nextstrain_ncov_gisaid_global_timetree.nwk')
gtree(tree)
ggtree(tree)
tree
tree$edge
tree$edge.length
tree$Nnode
tree$tip.label
gsub('.*/', '', tree$tip.label)[1:5]
year <- gsub('.*/', '', tree$tip.label)
tree$year <- gsub('.*/', '', tree$tip.label)
ggtree(tree, aes(color=year, linetype=year))
ggtree(tree, aes(color=year))
table(tree$year)
ggtree(tree, aes(color=as.factor(year)))
grep('Omi', tree$tip.label)
tree$tip.label[grep('Omi', tree$tip.label)]
?ggtree
tree$root.edge
tree$edge.length
tree <- groupClade(tree, node=c(21, 17))
?groupClade
tree$Nnode
tree <- groupClade(tree, node=c(2897))
ggtree(tree, aes(color=year, linetype=year)) + geom_tiplab(aes(subset=(year==2021)))
tree$year <- as.character(gsub('.*/', '', tree$tip.label))
ggtree(tree, aes(color=as.factor(year)))
table(tree$year)
tree[(tree$year == 2021), 'year'] <- 'Y_2021'
tree[(tree$year == 2021), ]
tree[(tree$year == 2021), 'year']
yr <- tree$year
yr[(yr == 2021)] <- 'Y_2021'
length(yr)
yr <- tree$year
length(yr)
yr[(yr == 2021)] <- 'Y_2021'
yr[(yr == 2019)] <- 'Y_2019'
yr[(yr == 2020)] <- 'Y_2020'
yr[(yr == 'Omi058-2021')] <- 'Omi058-2021'
yr[(yr == 'Omi058-TAK')] <- 'Omi058-TAK'
tree$year <- yr
ggtree(tree, aes(color=as.factor(year)))
as.factor(tree$year)
levels(tree$year)
levels(as.character(tree$year))
ggtree(tree)
?ggtree
ggtree(tree, yscale = tree$year)
ggtree(tree) + geom_treescale()
ggtree(tree) + geom_nodepoint()
ggtree(tree) + geom_tiplab()
tree_name <- tree
tree_name$tip.label <- tree$year
ggtree(tree) + geom_tiplab()
ggtree(tree_name) + geom_tiplab()
ggtree(tree_name) +   theme_tree2() +
geom_tiplab(align=TRUE, linesize=.5)
ggtree(tree_name, mrsd="2013-01-01") +   theme_tree2() +
geom_tiplab(align=TRUE, linesize=.5)
ggtree(tree_name, mrsd="2020-02-01") +   theme_tree2() +
geom_tiplab(align=TRUE, linesize=.5)
ggtree(tree_name, mrsd="2021-12-28") +   theme_tree2() +
geom_tiplab(align=TRUE, linesize=.5)
install.packages('Seurat')
library(seurat)
library(Seurat)
remotes::install_github('chris-mcginnis-ucsf/DoubletFinder')
suppressMessages(require(Seurat))
suppressMessages(require(Matrix))
suppressMessages(require(DoubletFinder))
library(Seurat)
path <- '~/SMS_5933_21_MYCN_bulk_scRNASeq_chicken_retina/'
samples_info <- read.csv(paste0(path,'code/scRNA_Seq/SampleSheet.csv'), skip = 1, header = T)
expression_list <- list()
for(s in 1:nrow(samples_info)){
sample <- samples_info$Sample_Name[s]
lane = paste0('_', samples_info$Lane[s])
sample_lane <- paste0(sample,lane)
cat('\r', sample_lane)
tmp <- Seurat::Read10X_h5(
filename = paste0(path,'results/scRNA_Seq/01-Mappings/', sample_lane, '/filtered_feature_bc_matrix.h5'),
use.names = T)
tmp_list <- list(tmp)
names(tmp_list) <- gsub(pattern = 'UF-2986-', replacement = '', x = sample_lane)
expression_list <- append(expression_list, tmp_list)
}
rm(tmp)
rm(tmp_list)
library(Seurat)
path <- '~/SMS_5933_21_MYCN_bulk_scRNASeq_chicken_retina/'
samples_info <- read.csv(paste0(path,'code/scRNA_Seq/SampleSheet.csv'), skip = 1, header = T)
expression_list <- list()
s <- 1
sample <- samples_info$Sample_Name[s]
lane = paste0('_', samples_info$Lane[s])
sample_lane <- paste0(sample,lane)
cat('\r', sample_lane)
tmp <- Seurat::Read10X_h5(
filename = paste0(path,'results/scRNA_Seq/01-Mappings/', sample_lane, '/filtered_feature_bc_matrix.h5'),
use.names = T)
tmp_list <- list(tmp)
names(tmp_list) <- gsub(pattern = 'UF-2986-', replacement = '', x = sample_lane)
expression_list <- append(expression_list, tmp_list)
install.packages("hdf5r")
sample <- samples_info$Sample_Name[s]
lane = paste0('_', samples_info$Lane[s])
sample_lane <- paste0(sample,lane)
cat('\r', sample_lane)
tmp <- Seurat::Read10X_h5(
filename = paste0(path,'results/scRNA_Seq/01-Mappings/', sample_lane, '/filtered_feature_bc_matrix.h5'),
use.names = T)
tmp_list <- list(tmp)
names(tmp_list) <- gsub(pattern = 'UF-2986-', replacement = '', x = sample_lane)
expression_list <- append(expression_list, tmp_list)
library(Seurat)
path <- '~/SMS_5933_21_MYCN_bulk_scRNASeq_chicken_retina/'
samples_info <- read.csv(paste0(path,'code/scRNA_Seq/SampleSheet.csv'), skip = 1, header = T)
expression_list <- list()
for(s in 1:nrow(samples_info)){
sample <- samples_info$Sample_Name[s]
lane = paste0('_', samples_info$Lane[s])
sample_lane <- paste0(sample,lane)
cat('\r', sample_lane)
tmp <- Seurat::Read10X_h5(
filename = paste0(path,'results/scRNA_Seq/01-Mappings/', sample_lane, '/filtered_feature_bc_matrix.h5'),
use.names = T)
tmp_list <- list(tmp)
names(tmp_list) <- gsub(pattern = 'UF-2986-', replacement = '', x = sample_lane)
expression_list <- append(expression_list, tmp_list)
}
rm(tmp)
rm(tmp_list)
variables <- gsub(x = names(expression_list), pattern = '-', replacement = '_') # Creating variable names to assing objects to them.
for(s in 1:length(expression_list)){
tmp <- CreateSeuratObject(expression_list[[s]],  project = names(expression_list[s]))
tmp$type <- gsub(x = variables[s], pattern = '_rep.*', replacement = '')
assign(variables[s], tmp)
}
all_data <- merge(E8_Retina_rep_1_1,	c(E8_Retina_rep_2_1,	E8_Retina_rep_3_1,	E8_Retina_rep_4_1,	E14_Retina_rep_1_1,	E14_Retina_rep_2_1,	E14_Retina_rep_3_1,	E14_Retina_rep_4_1,	MYCN_cellline_rep_1_1,	MYCN_cellline_rep_2_1,	MYCN_cellline_rep_3_1,	MYCN_cellline_rep_4_1,	E8_Retina_rep_1_2,	E8_Retina_rep_2_2,	E8_Retina_rep_3_2,	E8_Retina_rep_4_2,	E14_Retina_rep_1_2,	E14_Retina_rep_2_2,	E14_Retina_rep_3_2,	E14_Retina_rep_4_2,	MYCN_cellline_rep_1_2,	MYCN_cellline_rep_2_2,	MYCN_cellline_rep_3_2,	MYCN_cellline_rep_4_2), add.cell.ids = variables ) #c("E8_Retina_rep_1_1", "E8_Retina_rep_2_1", "E8_Retina_rep_3_1", "E8_Retina_rep_4_1", "E14_Retina_rep_1_1", "E14_Retina_rep_2_1", "E14_Retina_rep_3_1", "E14_Retina_rep_4_1", "MYCN_cellline_rep_1_1", "MYCN_cellline_rep_2_1", "MYCN_cellline_rep_3_1", "MYCN_cellline_rep_4_1", "E8_Retina_rep_1_2", "E8_Retina_rep_2_2", "E8_Retina_rep_3_2", "E8_Retina_rep_4_2", "E14_Retina_rep_1_2", "E14_Retina_rep_2_2", "E14_Retina_rep_3_2", "E14_Retina_rep_4_2", "MYCN_cellline_rep_1_2", "MYCN_cellline_rep_2_2", "MYCN_cellline_rep_3_2", "MYCN_cellline_rep_4_2")
rm(E8_Retina_rep_1_1,	E8_Retina_rep_2_1,	E8_Retina_rep_3_1,	E8_Retina_rep_4_1,	E14_Retina_rep_1_1,	E14_Retina_rep_2_1,	E14_Retina_rep_3_1,	E14_Retina_rep_4_1,	MYCN_cellline_rep_1_1,	MYCN_cellline_rep_2_1,	MYCN_cellline_rep_3_1,	MYCN_cellline_rep_4_1,	E8_Retina_rep_1_2,	E8_Retina_rep_2_2,	E8_Retina_rep_3_2,	E8_Retina_rep_4_2,	E14_Retina_rep_1_2,	E14_Retina_rep_2_2,	E14_Retina_rep_3_2,	E14_Retina_rep_4_2,	MYCN_cellline_rep_1_2,	MYCN_cellline_rep_2_2,	MYCN_cellline_rep_3_2,	MYCN_cellline_rep_4_2)
gc()
mito_genes <- as.vector(unique(annotation[(annotation$chromosome == 'MT'), 'Name'])[-1])
all_data <- PercentageFeatureSet(all_data, features = mito_genes, col.name = "percent_mito")
library(biomaRt)
mart <- useMart("ENSEMBL_MART_ENSEMBL")
mart <- useDataset(mart=mart,dataset="ggallus_gene_ensembl")
myattributes <- c("ensembl_gene_id",
"entrezgene_id",
"external_gene_name",
"chromosome_name",
"start_position",
"end_position",
"strand",
"gene_biotype",
"description")
bdata <- getBM(mart=mart,attributes=myattributes,uniqueRows=T,
useCache=FALSE)
# remove duplicated gene_ids
annotation <- bdata[!duplicated(bdata$ensembl_gene_id),c('chromosome_name', 'ensembl_gene_id', 'external_gene_name', 'entrezgene_id', 'gene_biotype')]
colnames(annotation) <- c('chromosome', 'gene_id', 'Name', 'entrezgene_id', 'biotype')
annotation[(annotation$Name == ''), 'Name'] <- 'Uncharacterised'
mito_genes <- as.vector(unique(annotation[(annotation$chromosome == 'MT'), 'Name'])[-1])
all_data <- PercentageFeatureSet(all_data, features = mito_genes, col.name = "percent_mito")
all_data <- PercentageFeatureSet(all_data, "^RP[SL]", col.name = "percent_ribo")
FeatureScatter(all_data, "nCount_RNA"  , "nFeature_RNA", group.by = "orig.ident", pt.size = .5)
selected_c <- WhichCells(all_data, expression = nFeature_RNA > 200)
selected_f <- rownames(all_data)[ Matrix::rowSums(all_data) > 3]
data.filt <- subset(all_data, features=selected_f, cells=selected_c)
dim(data.filt)
selected_mito <- WhichCells(data.filt, expression = percent_mito < 0.35)
selected_ribo <- WhichCells(data.filt, expression = percent_ribo > 0.05)
# and subset the object to only keep those cells
data.filt <- subset(data.filt, cells = selected_mito)
data.filt <- subset(data.filt, cells = selected_ribo)
dim(data.filt)
table(data.filt$orig.ident)
suppressMessages(require(DoubletFinder))
data.filt = FindVariableFeatures(data.filt, verbose = F)
data.filt = ScaleData(data.filt, vars.to.regress = c("nFeature_RNA", "percent_mito"), verbose = F)
data.filt = RunPCA(data.filt, verbose = F, npcs = 20)
data.filt = RunUMAP(data.filt, dims = 1:10, verbose = F)
version
nExp <- round(ncol(data.filt)* 0.04) # expect 4% doublets
data.filt <- doubletFinder_v3(data.filt, pN=0.25, pK = 0.09, nExp = nExp, PCs = 1:10)
install.packages('spam')
library(edgeR)
path <- '~/SMS_5933_21_MYCN_bulk_scRNASeq_chicken_retina/'
samples_info <- read.table(paste0(path, 'code/Bulk/Samples_read.txt'))
colnames(samples_info) <- c('Sample', 'R1', 'R2')
samples_info <- as.data.frame(samples_info[,1])
colnames(samples_info) <- c('Sample')
cntr <- 1
for(s in samples_info$Sample){
tmp_featurecounts <- read.table(paste0(path, 'intermediate/featureCounts/',s,'/count-s-2'), header = T, skip = 1)
if(cntr == 1){
data_raw <- data.frame(tmp_featurecounts[,1], matrix(0,nrow=nrow(tmp_featurecounts), ncol=nrow(samples_info), byrow = T))
colnames(data_raw) <- c('gene_id',as.character(samples_info$Sample))
data_raw[,s] <- tmp_featurecounts[,7]
}else{
data_raw[, as.character(s)] <- tmp_featurecounts[,7]
}
cat('\r', paste0(cntr,": ", as.character(s)))
cntr <- cntr + 1
}
data <- read.table('/Users/nimra236/SMS_5933_21_MYCN_bulk_scRNASeq_chicken_retina/intermediate/featureCounts/merged_gene_counts.txt')
rm(data)
data_raw <- read.table('/Users/nimra236/SMS_5933_21_MYCN_bulk_scRNASeq_chicken_retina/intermediate/featureCounts/merged_gene_counts.txt')
library(edgeR)
construct_features <- c('IRES2_GFP', 'hMYCN')
path <- '~/SMS_5933_21_MYCN_bulk_scRNASeq_chicken_retina/'
samples_info <- read.table(paste0(path, 'doc/Bulk_Samples_info.txt'), header = T)
rownames(samples_info) <- samples_info$Sample
data <- read.table(paste0(path,'intermediate/featureCounts/merged_gene_counts.txt'), header = T)
colnames(data) <- gsub(pattern = 'Sample_UF.2987.', replacement = '', perl = T, x = colnames(data))
rm(data_raw)
#Reordering the samples
data <- data[,c('gene_id', samples_info$Sample)]
##Normalising the reads
y <- DGEList(counts=data[,-1], group=factor(colnames(data[,-1])))
y <- calcNormFactors(y)
y$samples$eff.lib.size <- y$samples$lib.size * y$samples$norm.factors
# write.table(y$samples,  paste0(path,"intermediate/featureCounts/library-size-norm.factors.txt"), col.names = T, row.names = F, sep = '\t' , quote = F)
data.TMM <- cbind.data.frame(gene_id = data$gene_id, y$counts/y$samples$norm.factors)
data.TMM <- data.TMM[,c(1,5:7,2:4,8:13)] # Reordering the samples to place unelectroporated as first
rownames(data.TMM) <- data.TMM$gene_id
data.TMM.sample_info <- data.frame(Sample = colnames(data.TMM), order = 1:ncol(data.TMM))
library(ggplot2)
path <- '~/SMS_5933_21_MYCN_bulk_scRNASeq_chicken_retina/'
groups <- c('Unelectroporated', 'Old_MYCN')
contrast <- paste0(groups, collapse = '_')
##Differential expression analyses
my.path <- paste0(path, 'results/Bulk/04-DE/', contrast)
dir.create(path = my.path)
setwd(my.path)
A <- data.TMM.sample_info[(data.TMM.sample_info$Group == groups[1]),'order']
B <-  data.TMM.sample_info[(data.TMM.sample_info$Group == groups[2]),'order']
group <- as.character(samples_info[(colnames(data.TMM[,c(A,B)])),'Group'])
data.TMM[1,c(A,B)]
A
data.TMM.sample_info
data.TMM.sample_info <- data.frame(Sample = colnames(data.TMM), order = 1:ncol(data.TMM))
data.TMM.sample_info
path <- '~/SMS_5933_21_MYCN_bulk_scRNASeq_chicken_retina/'
samples_info <- read.table(paste0(path, 'doc/Bulk_Samples_info.txt'), header = T)
rownames(samples_info) <- samples_info$Sample
data.TMM.sample_info <- merge(data.TMM.sample_info, samples_info, by = 'Sample')
rownames(data.TMM.sample_info) <- data.TMM.sample_info$Sample
data.TMM.sample_info
library(ggplot2)
path <- '~/SMS_5933_21_MYCN_bulk_scRNASeq_chicken_retina/'
groups <- c('Unelectroporated', 'Old_MYCN')
contrast <- paste0(groups, collapse = '_')
##Differential expression analyses
my.path <- paste0(path, 'results/Bulk/04-DE/', contrast)
dir.create(path = my.path)
setwd(my.path)
A <- data.TMM.sample_info[(data.TMM.sample_info$Group == groups[1]),'order']
B <-  data.TMM.sample_info[(data.TMM.sample_info$Group == groups[2]),'order']
group <- as.character(samples_info[(colnames(data.TMM[,c(A,B)])),'Group'])
data.TMM[1,c(A,B)]
data.TMM['hMYCN',]
data.TMM['hMYCN',c(A,B)]
run_edge_R
run_edge_R()
source('https://raw.githubusercontent.com/nimarafati/RNA_Seq_Pipeline/master/RNA_Seq/DE_script.R')
run_edge_R()
run_edge_R(
run_edge_R
setwd('~/Desktop/')
run_edge_R
results <- run_edge_R(data.TMM, B, A, annotation[,c('gene_id', 'Name')], group, nsample = 3)
A
B
group
library(ggplot2)
path <- '~/SMS_5933_21_MYCN_bulk_scRNASeq_chicken_retina/'
groups <- c('Unelectroporated', 'Young_MYCN')
contrast <- paste0(groups, collapse = '_')
A <- data.TMM.sample_info[(data.TMM.sample_info$Group == groups[1]),'order']
B <-  data.TMM.sample_info[(data.TMM.sample_info$Group == groups[2]),'order']
group <- as.character(samples_info[(colnames(data.TMM[,c(A,B)])),'Group'])
data.TMM[1,c(A,B)]
results <- run_edge_R(data.TMM, A, B, annotation[,c('gene_id', 'Name')], group, nsample = 3)
library(ggplot2)
path <- '~/SMS_5933_21_MYCN_bulk_scRNASeq_chicken_retina/'
groups <- c('Unelectroporated', 'Old_T58A')
contrast <- paste0(groups, collapse = '_')
getwd()
A <- data.TMM.sample_info[(data.TMM.sample_info$Group == groups[1]),'order']
B <-  data.TMM.sample_info[(data.TMM.sample_info$Group == groups[2]),'order']
group <- as.character(samples_info[(colnames(data.TMM[,c(A,B)])),'Group'])
data.TMM[1,c(A,B)]
results <- run_edge_R(data.TMM, B, A, annotation[,c('gene_id', 'Name')], group, nsample = 3)
head(data)
data[(data$gene_id == 'hMYCN'),]
data[(data$gene_id == 'IRES2_GFP'),]
?rmarkdown::render
35/568
44/968
rnd(5)
rand(5)
sample(5)
sample(5)[1]
recept <- read.csv('~/Dropbox/Ours/Hello_Nima/Hello_Nima', header = t, sep = '\t')
recept <- read.csv('~/Dropbox/Ours/Hello_Nima/Hello_Nima', header = T, sep = '\t')
recept
recept <- read.csv('~/Dropbox/Ours/Hello_Nima/Hello_Nima', header = T, sep = '\t')
portions <- 4
tmp_recept <- recept[(recept$portion = portions ), ]
?sample
sample(nrow(tmp_recept),1)
sample(nrow(tmp_recept),1)
tmp_recept
recept
recept <- read.csv('~/Dropbox/Ours/Hello_Nima/Hello_Nima', header = T, sep = '\t')
portions <- 4
tmp_recept <- recept[(recept$portion = portions ), ]
tmp_recept
recept <- read.csv('~/Dropbox/Ours/Hello_Nima/Hello_Nima', header = T, sep = '\t')
portions <- 4
tmp_recept <- recept[(recept$portion = portions ), ]
tmp_recept
recept <- read.csv('~/Dropbox/Ours/Hello_Nima/Hello_Nima', header = T, sep = '\t')
portions <- 4
table(recept$portions)
tmp_recept <- recept[(recept$portion == portions ), ]
tmp_recept
sample(nrow(tmp_recept),n_recepts)
n_recepts <- 1
sample(nrow(tmp_recept),n_recepts)
subset(tmp_recept, Type %in% c('Veg'))
recept <- read.csv('~/Dropbox/Ours/Hello_Nima/Hello_Nima', header = T, sep = '\t')
portions <- 4
meals <- c('Veg', 'Kyckling')
tmp_recept <- recept[(recept$portion == portions ), ]
subset(tmp_recept, Type %in% meals)
n_recepts <- 1
tmp_recept[sample(nrow(tmp_recept),n_recepts),]
recept <- read.csv('~/Dropbox/Ours/Hello_Nima/Hello_Nima', header = T, sep = '\t')
portions <- 4
meals <- c('Veg', 'Kyckling')
tmp_recept <- recept[(recept$portion == portions ), ]
subset(tmp_recept, Type %in% meals)
n_recepts <- 2
tmp_recept[sample(nrow(tmp_recept),n_recepts),]
recept <- read.csv('~/Dropbox/Ours/Hello_Nima/Hello_Nima', header = T, sep = '\t', stringsAsFactors = T)
recept
recept <- read.csv('~/Dropbox/Ours/Hello_Nima/Hello_Nima', header = T, sep = '\t', stringsAsFactors = T)
portions <- 4
meals <- c('Veg', 'Kyckling')
tmp_recept <- recept[(recept$portion == portions ), ]
subset(tmp_recept, Type %in% meals)
n_recepts <- 2
tmp_recept[sample(nrow(tmp_recept),n_recepts),]
recept <- read.csv('~/Dropbox/Ours/Hello_Nima/Hello_Nima', header = T, sep = '\t', stringsAsFactors = T)
colnames(recept) <- toupper(colnames(recept))
?str_to_title
library(stringr)
colnames(recept) <- str_to_title(colnames(recept))
recept <- read.csv('~/Dropbox/Ours/Hello_Nima/Hello_Nima', header = T, sep = '\t', stringsAsFactors = T)
colnames(recept) <- str_to_title(colnames(recept))
portions <- 4
meals <- c('Veg', 'Kyckling')
tmp_recept <- recept[(recept$Portions == portions ), ]
subset(tmp_recept, Type %in% meals)
n_recepts <- 2
tmp_recept[sample(nrow(tmp_recept),n_recepts),]
library(stringr)
recept <- read.csv('~/Dropbox/Ours/Hello_Nima/Hello_Nima', header = T, sep = '\t', stringsAsFactors = T)
colnames(recept) <- str_to_title(colnames(recept))
portions <- 4
meals <- c('Veg', 'Kyckling')
tmp_recept <- recept[(recept$Portions == portions ), ]
subset(tmp_recept, Type %in% meals)
n_recepts <- 2
tmp_recept[sample(nrow(tmp_recept),n_recepts),]
colSums(tmp_recept)
colSums(tmp_recept[,4:ncol(tmp_recept)])
recept <- read.csv('~/Dropbox/Ours/Hello_Nima/Hello_Nima', header = T, sep = '\t', stringsAsFactors = T)
tmp_recept[,4:ncol(tmp_recept)]
colSums(tmp_recept[,4:ncol(tmp_recept)], na.rm=T)
library(stringr)
recept <- read.csv('~/Dropbox/Ours/Hello_Nima/Hello_Nima', header = T, sep = '\t', stringsAsFactors = T)
colnames(recept) <- str_to_title(colnames(recept))
portions <- 4
meals <- c('Veg', 'Kyckling')
tmp_recept <- recept[(recept$Portions == portions ), ]
subset(tmp_recept, Type %in% meals)
n_recepts <- 2
tmp_recept[sample(nrow(tmp_recept),n_recepts),]
colSums(tmp_recept[,4:ncol(tmp_recept)], na.rm=T)
library(stringr)
recept <- read.csv('~/Dropbox/Ours/Hello_Nima/Hello_Nima', header = T, sep = '\t', stringsAsFactors = T)
colnames(recept) <- str_to_title(colnames(recept))
portions <- 4
meals <- c('Veg', 'Kyckling')
tmp_recept <- recept[(recept$Portions == portions ), ]
subset(tmp_recept, Type %in% meals)
n_recepts <- 2
tmp_recept[sample(nrow(tmp_recept),n_recepts),]
colSums(tmp_recept[,4:ncol(tmp_recept)], na.rm=T)
getwd()
setwd('~/Dropbox/Doc/My_tools_in/My_Toolbox/Bash/')
